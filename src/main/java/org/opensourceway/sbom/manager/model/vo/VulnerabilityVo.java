package org.opensourceway.sbom.manager.model.vo;

import org.apache.commons.lang3.StringUtils;
import org.opensourceway.sbom.manager.model.ExternalVulRef;
import org.opensourceway.sbom.manager.model.VulScore;
import org.opensourceway.sbom.manager.model.VulScoringSystem;
import org.opensourceway.sbom.manager.model.Vulnerability;
import org.opensourceway.sbom.manager.utils.PurlUtil;
import org.springframework.data.util.Pair;

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

public class VulnerabilityVo implements Serializable {

    private String vulId;

    private String scoringSystem;

    private Double score;

    private String vector;

    private List<Pair<String, String>> references;

    private String purl;

    public String getVulId() {
        return vulId;
    }

    public void setVulId(String vulId) {
        this.vulId = vulId;
    }

    public String getScoringSystem() {
        return scoringSystem;
    }

    public void setScoringSystem(String scoringSystem) {
        this.scoringSystem = scoringSystem;
    }

    public Double getScore() {
        return score;
    }

    public void setScore(Double score) {
        this.score = score;
    }

    public String getVector() {
        return vector;
    }

    public void setVector(String vector) {
        this.vector = vector;
    }

    public List<Pair<String, String>> getReferences() {
        return references;
    }

    public void setReferences(List<Pair<String, String>> references) {
        this.references = references;
    }

    public String getPurl() {
        return purl;
    }

    public void setPurl(String purl) {
        this.purl = purl;
    }

    public static VulnerabilityVo fromExternalVulRef(ExternalVulRef externalVulRef) {
        VulnerabilityVo vo = new VulnerabilityVo();

        Vulnerability vulnerability = externalVulRef.getVulnerability();
        vo.setVulId(vulnerability.getVulId());
        inferAndSetScore(vo, vulnerability);
        vo.setReferences(vulnerability.getVulReferences().stream().map(ref -> Pair.of(ref.getSource(), ref.getUrl())).toList());
        vo.setPurl(PurlUtil.PackageUrlVoToPackageURL(externalVulRef.getPurl()).canonicalize());
        return vo;
    }

    private static void inferAndSetScore(VulnerabilityVo vo, Vulnerability vulnerability) {
        List<VulScore> scores = vulnerability.getVulScores();
        if (scores.size() == 1) {
            vo.setScoringSystem(scores.get(0).getScoringSystem());
            vo.setScore(scores.get(0).getScore());
            vo.setVector(scores.get(0).getVector());
        } else if (scores.size() > 1) {
            VulScore cvss3 = scores.stream()
                    .filter(score -> StringUtils.equals(score.getScoringSystem(), VulScoringSystem.CVSS3.name()))
                    .findFirst()
                    .orElse(null);
            VulScore cvss2 = scores.stream()
                    .filter(score -> StringUtils.equals(score.getScoringSystem(), VulScoringSystem.CVSS2.name()))
                    .findFirst()
                    .orElse(null);

            if (Objects.nonNull(cvss3)) {
                vo.setScoringSystem(cvss3.getScoringSystem());
                vo.setScore(cvss3.getScore());
                vo.setVector(cvss3.getVector());
            } else if (Objects.nonNull(cvss2)) {
                vo.setScoringSystem(cvss2.getScoringSystem());
                vo.setScore(cvss2.getScore());
                vo.setVector(cvss2.getVector());
            }
        }
    }

}
